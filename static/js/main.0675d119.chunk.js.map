{"version":3,"sources":["PokedexInfo.tsx","App.tsx","index.tsx"],"names":["colors","fire","grass","electric","water","ground","rock","fairy","poison","bug","dragon","psychic","flying","fighting","normal","PokedexDetails","open","onClose","flavor","pokemon","dialogElementRef","useRef","useEffect","dialogElement","current","hasAttribute","removeAttribute","showModal","close","addEventListener","removeEventListener","ref","map","text","index","PokedexInfo","useState","showBack","setShowBack","showDetails","setShowDetails","id","name","sprites","front","back","types","captalizedName","toUpperCase","slice","className","style","background","onClick","src","alt","type","reducer","state","action","pokemons","concat","next","initial","fetchJSON","input","init","fetch","then","response","json","map_async","transform","Promise","all","rxWierdCharacter","RegExp","fetchFlavorText","a","data","flavor_text_entries","filter","entry","language","flavor_text","replace","fetchPokemon","url","front_default","back_default","item","App","useReducer","dispatch","fetchData","results","overflowY","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0675d119.chunk.js","sourcesContent":["import { useEffect, useRef, useState } from \"react\";\n\nexport type Pokemon = {\n  id: string;\n  name: string;\n  sprites: [string, string];\n  flavor: string[];\n  types: string[];\n};\n\ninterface PokedexInfoProps {\n  pokemon: Pokemon;\n}\n\ninterface PokedexDetailsProps extends PokedexInfoProps {\n  open: boolean;\n  onClose(): void;\n}\n\nconst colors: Record<string, string> = {\n  fire: \"#FDDFDF\",\n  grass: \"#DEFDE0\",\n  electric: \"#FCF7DE\",\n  water: \"#DEF3FD\",\n  ground: \"#f4e7da\",\n  rock: \"#d5d5d4\",\n  fairy: \"#fceaff\",\n  poison: \"#98d7a5\",\n  bug: \"#f8d5a3\",\n  dragon: \"#97b3e6\",\n  psychic: \"#eaeda1\",\n  flying: \"#F5F5F5\",\n  fighting: \"#E6E0D4\",\n  normal: \"#F5F5F5\",\n};\n\nfunction PokedexDetails({\n  open,\n  onClose,\n  pokemon: { flavor },\n}: PokedexDetailsProps) {\n  const dialogElementRef = useRef<HTMLDialogElement>(null!);\n\n  useEffect(() => {\n    const dialogElement = dialogElementRef.current;\n    if (dialogElement) {\n      if (open) {\n        if (dialogElement.hasAttribute(\"open\"))\n          dialogElement.removeAttribute(\"open\");\n        dialogElement.showModal();\n      } else {\n        dialogElement.close();\n      }\n      dialogElement.addEventListener(\"close\", onClose);\n      return () => dialogElement.removeEventListener(\"close\", onClose);\n    }\n  }, [dialogElementRef, open, onClose]);\n\n  return (\n    <dialog ref={dialogElementRef}>\n      {flavor.map((text, index) => (\n        <p key={index}>{text}</p>\n      ))}\n    </dialog>\n  );\n}\n\nexport default function PokedexInfo({ pokemon }: PokedexInfoProps) {\n  const [showBack, setShowBack] = useState(false);\n  const [showDetails, setShowDetails] = useState(false);\n\n  const {\n    id,\n    name,\n    sprites: [front, back],\n    types,\n    flavor,\n  } = pokemon;\n\n  const captalizedName = name[0].toUpperCase() + name.slice(1);\n\n  return (\n    <>\n      <article\n        className=\"pokedex-info\"\n        style={{\n          background: colors[types[0]],\n        }}\n      >\n        <figure onClick={() => setShowBack(!showBack)}>\n          <img\n            className={showBack ? \"is-back\" : \"\"}\n            src={showBack ? back : front}\n            alt={`A depiction of ${name}`}\n          />\n        </figure>\n        <header>\n          <h3>{captalizedName}</h3>\n          <h5>#{id}</h5>\n        </header>\n        <section>\n          {types.map((type, index) => (\n            <span key={index} className=\"nes-badge\">\n              <span className=\"is-dark\">{type}</span>\n            </span>\n          ))}\n          <p>{flavor[0]}</p>\n\n          <button\n            type=\"button\"\n            className=\"nes-button\"\n            onClick={() => setShowDetails(true)}\n          >\n            More details\n          </button>\n        </section>\n        <PokedexDetails\n          pokemon={pokemon}\n          open={showDetails}\n          onClose={() => setShowDetails(false)}\n        />\n      </article>\n    </>\n  );\n}\n","import { useEffect, useReducer } from \"react\";\n\nimport PokedexInfo, { Pokemon } from \"./PokedexInfo\";\n\ntype Action = {\n  type: \"ADD_POKEMONS\";\n  pokemons: Pokemon[];\n  next: string;\n};\n\ntype State = {\n  next: string;\n  pokemons: Pokemon[];\n};\n\nfunction reducer(state: State, action: Action) {\n  switch (action.type) {\n    case \"ADD_POKEMONS\":\n      return {\n        ...state,\n        pokemons: state.pokemons.concat(action.pokemons),\n        next: action.next,\n      };\n    default:\n      return state;\n  }\n}\n\nconst initial = {\n  pokemons: [],\n  next: \"https://pokeapi.co/api/v2/pokemon/?limit=30\",\n};\n\nfunction fetchJSON(input: RequestInfo, init?: RequestInit) {\n  return fetch(input, init).then(response => response.json());\n}\n\nfunction map_async<T, U>(input: T[], transform: (input: T) => Promise<U>) {\n  return Promise.all(input.map(transform));\n}\n\n// eslint-disable-next-line no-control-regex\nconst rxWierdCharacter = new RegExp(\"\f\", \"g\");\n\nasync function fetchFlavorText(id: string): Promise<string[]> {\n  const data = await fetchJSON(\n    `https://pokeapi.co/api/v2/pokemon-species/${id}/`\n  );\n  return data.flavor_text_entries\n    .filter((entry: any, index: number) => entry.language.name === \"en\")\n    .map((entry: any) => entry.flavor_text.replace(rxWierdCharacter, \" \"));\n}\n\nasync function fetchPokemon({\n  url,\n  name,\n}: {\n  url: string;\n  name: string;\n}): Promise<Pokemon> {\n  const data = await fetchJSON(url);\n  return {\n    id: data.id,\n    name,\n    sprites: [data.sprites.front_default, data.sprites.back_default],\n    types: data.types.map((item: any) => item.type.name),\n    flavor: await fetchFlavorText(data.id),\n  };\n}\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, initial);\n\n  useEffect(() => void fetchData(), []);\n\n  async function fetchData() {\n    const data = await fetchJSON(state.next);\n    dispatch({\n      type: \"ADD_POKEMONS\",\n      pokemons: await map_async(data.results, fetchPokemon),\n      next: data.next,\n    });\n  }\n\n  return (\n    <>\n      <div className=\"pokedex\" style={{ overflowY: \"auto\" }}>\n        {state.pokemons.map((pokemon, index) => (\n          <PokedexInfo key={index} pokemon={pokemon} />\n        ))}\n      </div>\n      <button onClick={fetchData}>Load more ...</button>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}